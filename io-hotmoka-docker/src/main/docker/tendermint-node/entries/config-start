#!/bin/bash

# This script creates the configuration directory of a Hotmoka node based on Tendermint, for starting a node
# of an already existing blockchain. The configuration directory will have the following structure:
#
# validator.pem
# tendermint_config/
# local_config.toml
#
# where:
# 1) validator.pem is a key pair with empty password
# 2) tendermint_config uses validator.pem as key pair for the only initial validator
# 3) options not explicitly reported in the toml configuration file hold, implicitly, default values

RED='\033[0;31m'
BOLD_GREEN='\033[1;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

HOTMOKA_PUBLIC_SERVICE_URI=${HOTMOKA_PUBLIC_SERVICE_URI:-ws://panarea.hotmoka.io:8002}
TARGET_BLOCK_CREATION_TIME=${TARGET_BLOCK_CREATION_TIME:-10000}

BASE_NETWORK_URI=$(echo $HOTMOKA_PUBLIC_SERVICE_URI | sed s/":[0-9][0-9]*"/""/g | sed s/".*:\/\/"/""/g) # remove trailing port and protocol, if any

echo -e "${BOLD_GREEN}Going to create the configuration directory of a Hotmoka node using the Tendermint byzantine consensus engine, with the following parameters:${NC}"
echo
echo -e " ${BLUE}HOTMOKA_PUBLIC_SERVICE_URI${NC}=${RED}$HOTMOKA_PUBLIC_SERVICE_URI${NC}"
echo -e " ${BLUE}TARGET_BLOCK_CREATION_TIME${NC}=${RED}$TARGET_BLOCK_CREATION_TIME${NC}"
echo

echo -n "Cleaning the directory hotmoka_tendermint... "
rm -rf hotmoka_tendermint/*
echo -e "${RED}done${NC}"

echo -n "Creating the validator.pem key pair of the node as validator... "
VALIDATOR_ACCOUNT_CREATION=$(moka keys create --output-dir=hotmoka_tendermint --name=validator.pem --json)
chmod og-rwx hotmoka_tendermint/validator.pem
PUBLIC_KEY_BASE64=$(echo ${VALIDATOR_ACCOUNT_CREATION} | python3 -c "import sys, json; print(json.load(sys.stdin)['publicKeyBase64'])")
TENDERMINT_ADDRESS=$(echo ${VALIDATOR_ACCOUNT_CREATION} | python3 -c "import sys, json; print(json.load(sys.stdin)['tendermintAddress'])")
echo -e "${RED}done${NC}"

echo -n "Creating the local Hotmoka node configuration file... "
touch hotmoka_tendermint/local_config.toml
echo -e "${RED}done${NC}"

echo -n "Extracting the Tendermint configuration files to match those at ${HOTMOKA_PUBLIC_SERVICE_URI}... "
echo

# create an initial Tendermint configuration, that later will be modified for our needs
mkdir hotmoka_tendermint/tendermint_config
tendermint init --home hotmoka_tendermint/tendermint_config >> /dev/null
#tendermint testnet --v 0 --n 1 --o . >> /dev/null # what's the difference with this?

# replace the validator's key used by Tendermint with that created above
moka nodes tendermint validators key hotmoka_tendermint/validator.pem --output-dir=hotmoka_tendermint/tendermint_config/config/ >> /dev/null

# extract information about the remote node, that are needed in order to prepare the Tendermint configuration of the local node
REMOTE_NODE_ID=$(moka nodes info --json --uri $HOTMOKA_PUBLIC_SERVICE_URI | python3 -c "import sys, json; print(json.load(sys.stdin)['info']['ID'])")
MANIFEST_ADDRESS_JSON=$(moka nodes manifest address --json --uri $HOTMOKA_PUBLIC_SERVICE_URI)
MANIFEST_TRANSACTION=$(echo ${MANIFEST_ADDRESS_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['manifest']['transaction']['hash'])")
MANIFEST_PROGRESSIVE=$(printf '%x' $(echo ${MANIFEST_ADDRESS_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['manifest']['progressive'])"))
MANIFEST=$MANIFEST_TRANSACTION#$MANIFEST_PROGRESSIVE
echo -e "  ${BLUE}MANIFEST${NC}=${RED}$MANIFEST${NC}"
CHAIN_ID_JSON=$(moka objects call $MANIFEST io.takamaka.code.governance.Manifest getChainId --receiver $MANIFEST --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
CHAIN_ID=$(echo ${CHAIN_ID_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['stringValue'])")
echo -e "  ${BLUE}CHAIN_ID${NC}=${RED}$CHAIN_ID${NC}"
GENESIS_TIME_JSON=$(moka objects call $MANIFEST io.takamaka.code.governance.Manifest getGenesisTime --receiver $MANIFEST --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
GENESIS_TIME=$(echo ${GENESIS_TIME_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['stringValue'])")
echo -e "  ${BLUE}GENESIS_TIME${NC}=${RED}$GENESIS_TIME${NC}"
INITIAL_VALIDATORS_JSON=$(moka objects call $MANIFEST io.takamaka.code.governance.Manifest getInitialValidators --receiver $MANIFEST --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
INITIAL_VALIDATORS_TRANSACTION=$(echo ${INITIAL_VALIDATORS_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['transaction']['hash'])")
INITIAL_VALIDATORS_PROGRESSIVE=$(printf '%x' $(echo ${INITIAL_VALIDATORS_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['progressive'])"))
INITIAL_VALIDATORS=$INITIAL_VALIDATORS_TRANSACTION#$INITIAL_VALIDATORS_PROGRESSIVE
echo -e "  ${BLUE}INITIAL_VALIDATORS${NC}=${RED}$INITIAL_VALIDATORS${NC}"
SHARES_JSON=$(moka objects call $MANIFEST io.takamaka.code.dao.SharedEntityView getShares --receiver $INITIAL_VALIDATORS --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
SHARES_TRANSACTION=$(echo ${SHARES_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['transaction']['hash'])")
SHARES_PROGRESSIVE=$(printf '%x' $(echo ${SHARES_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['progressive'])"))
SHARES=$SHARES_TRANSACTION#$SHARES_PROGRESSIVE
echo -e "  ${BLUE}SHARES${NC}=${RED}$SHARES${NC}"
NUM_INITIAL_VALIDATORS_JSON=$(moka objects call $MANIFEST io.takamaka.code.util.StorageMapView size --receiver $SHARES --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
NUM_INITIAL_VALIDATORS=$(echo ${NUM_INITIAL_VALIDATORS_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['intValue'])")
echo -e "  ${BLUE}NUM_INITIAL_VALIDATORS${NC}=${RED}$NUM_INITIAL_VALIDATORS${NC}"

# extract information about each single initial validator, that goes into the Tendermint genesis file of the local node
for (( i=0; i<$NUM_INITIAL_VALIDATORS; i++ ))
do
	INITIAL_VALIDATOR_JSON=$(moka objects call $MANIFEST io.takamaka.code.util.StorageMapView select $i --receiver $SHARES --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
	INITIAL_VALIDATOR_TRANSACTION=$(echo ${INITIAL_VALIDATOR_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['transaction']['hash'])")
	INITIAL_VALIDATOR_PROGRESSIVE=$(printf '%x' $(echo ${INITIAL_VALIDATOR_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['progressive'])"))
	INITIAL_VALIDATOR=$INITIAL_VALIDATOR_TRANSACTION#$INITIAL_VALIDATOR_PROGRESSIVE
	echo -e "    ${BLUE}INITIAL_VALIDATOR #$i${NC}=${RED}$INITIAL_VALIDATOR${NC}"
	ID_JSON=$(moka objects call $MANIFEST io.takamaka.code.governance.Validator id --receiver $INITIAL_VALIDATOR --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
	ID=$(echo ${ID_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['stringValue'])")
	echo -e "    ${BLUE}ID OF INITIAL_VALIDATOR #$i${NC}=${RED}$ID${NC}"
	PUBLIC_KEY_JSON=$(moka objects call $MANIFEST io.takamaka.code.lang.Account publicKey --receiver $INITIAL_VALIDATOR --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
	PUBLIC_KEY=$(echo ${PUBLIC_KEY_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['stringValue'])")
	echo -e "    ${BLUE}PUBLIC KEY OF INITIAL_VALIDATOR #$i${NC}=${RED}$PUBLIC_KEY${NC}"
	POWER_JSON=$(moka objects call $MANIFEST io.takamaka.code.util.StorageMapView get $INITIAL_VALIDATOR --receiver $SHARES --uri $HOTMOKA_PUBLIC_SERVICE_URI --json)
	POWER=$(echo ${POWER_JSON} | python3 -c "import sys, json; print(json.load(sys.stdin)['result']['bigIntegerValue'])")
	echo -e "    ${BLUE}POWER OF INITIAL_VALIDATOR #$i${NC}=${RED}$POWER${NC}"
	
	# the JSON that goes into the Tendermint genesis file of the local node
	JSON='    {
      "address": "'$ID'",
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "'$PUBLIC_KEY'"
      },
      "power": "'$POWER'",
      "name": "'$ID'"
    }'

	# merge the JSON of each single initial validator into a unique, comma-separated JSON string
    if [ -z "$ALL_INITIAL_VALIDATORS_JSON" ]
	then
        ALL_INITIAL_VALIDATORS_JSON=$JSON
	else
		ALL_INITIAL_VALIDATORS_JSON="${INITIAL_VALIDATORS_JSON}"$',\n'"${JSON}"
	fi
done

ALL_INITIAL_VALIDATORS_JSON=$'\n'"${ALL_INITIAL_VALIDATORS_JSON}"$'\n  '
echo -e "  ${BLUE}ALL_INITIAL_VALIDATORS_JSON${NC}=${RED}$ALL_INITIAL_VALIDATORS_JSON"${NC}

# replace the genesis.json with one without list of validators
cp genesis.json hotmoka_tendermint/tendermint_config/config/

# set the genesis time as in the remote node
sed -i '/"genesis_time": /s/".*"/"genesis_time": "'$GENESIS_TIME'"/' hotmoka_tendermint/tendermint_config/config/genesis.json

# set the chain id as in the remote node
sed -i '/"chain_id": /s/".*"/"chain_id": "'$CHAIN_ID'"/' hotmoka_tendermint/tendermint_config/config/genesis.json

# set the initial validators as in the remote node
awk -v r=\"validators\":\ ["${ALL_INITIAL_VALIDATORS_JSON}"] '{gsub(/"validators": \[\]/,r)}1' hotmoka_tendermint/tendermint_config/config/genesis.json > temp_genesis.json # cannot do in place
mv temp_genesis.json hotmoka_tendermint/tendermint_config/config/genesis.json

# disable the creation of empty blocks
sed -i "s/create_empty_blocks = true/create_empty_blocks = false/g" hotmoka_tendermint/tendermint_config/config/config.toml

# set the timeout for commits
sed -i '/timeout_commit = /s/".*"/"'$((TARGET_BLOCK_CREATION_TIME/1000))s'"/' hotmoka_tendermint/tendermint_config/config/config.toml # it would be nice to clone this from the peer

# set the remote node as persistent seed
sed -i '/persistent_peers =/s/".*"/"'$REMOTE_NODE_ID@$BASE_NETWORK_URI:26656'"/' hotmoka_tendermint/tendermint_config/config/config.toml

echo -e "${RED}done${NC}"
