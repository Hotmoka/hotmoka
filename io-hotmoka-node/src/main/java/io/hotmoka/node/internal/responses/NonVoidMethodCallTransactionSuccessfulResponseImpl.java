/*
Copyright 2021 Fausto Spoto

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package io.hotmoka.node.internal.responses;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import io.hotmoka.annotations.Immutable;
import io.hotmoka.exceptions.ExceptionSupplier;
import io.hotmoka.exceptions.Objects;
import io.hotmoka.marshalling.api.MarshallingContext;
import io.hotmoka.marshalling.api.UnmarshallingContext;
import io.hotmoka.node.StorageValues;
import io.hotmoka.node.Updates;
import io.hotmoka.node.api.responses.NonVoidMethodCallTransactionSuccessfulResponse;
import io.hotmoka.node.api.updates.Update;
import io.hotmoka.node.api.values.StorageReference;
import io.hotmoka.node.api.values.StorageValue;
import io.hotmoka.node.internal.json.TransactionResponseJson;
import io.hotmoka.node.internal.values.StorageReferenceImpl;
import io.hotmoka.websockets.beans.api.InconsistentJsonException;

/**
 * Implementation of a response for a successful transaction that calls a method
 * in the store of the node. The method has been called without problems and
 * without generating exceptions. The method does not return {@code void}.
 */
@Immutable
public class NonVoidMethodCallTransactionSuccessfulResponseImpl extends MethodCallTransactionResponseImpl implements NonVoidMethodCallTransactionSuccessfulResponse {
	final static byte SELECTOR = 9;
	final static byte SELECTOR_NO_EVENTS = 10;
	final static byte SELECTOR_ONE_EVENT = 11;

	/**
	 * The return value of the method.
	 */
	private final StorageValue result;

	/**
	 * The events generated by this transaction.
	 */
	private final StorageReference[] events;

	/**
	 * Builds the transaction response.
	 * 
	 * @param result the value returned by the method
	 * @param updates the updates resulting from the execution of the transaction
	 * @param events the events resulting from the execution of the transaction
	 * @param gasConsumedForCPU the amount of gas consumed by the transaction for CPU execution
	 * @param gasConsumedForRAM the amount of gas consumed by the transaction for RAM allocation
	 * @param gasConsumedForStorage the amount of gas consumed by the transaction for storage consumption
	 * @param result the value returned by the method
	 * @param events the events resulting from the execution of the transaction
	 */
	public NonVoidMethodCallTransactionSuccessfulResponseImpl(StorageValue result, Stream<Update> updates, Stream<StorageReference> events, BigInteger gasConsumedForCPU, BigInteger gasConsumedForRAM, BigInteger gasConsumedForStorage) {
		this(updates.toArray(Update[]::new), gasConsumedForCPU, gasConsumedForRAM, gasConsumedForStorage, result, events.toArray(StorageReference[]::new), IllegalArgumentException::new);
	}

	/**
	 * Unmarshals a response from the given stream.
	 * The selector of the response has been already processed.
	 * 
	 * @param context the unmarshalling context
	 * @param selector the selector
	 * @throws IOException if the response could not be unmarshalled
	 */
	public NonVoidMethodCallTransactionSuccessfulResponseImpl(UnmarshallingContext context, byte selector) throws IOException {
		this(
			context.readLengthAndArray(Updates::from, Update[]::new),
			context.readBigInteger(),
			context.readBigInteger(),
			context.readBigInteger(),
			StorageValues.from(context),
			unmarshalEvents(context, selector),
			IOException::new
		);
	}

	/**
	 * Creates a response from the given JSON representation.
	 * 
	 * @param json the JSON representation
	 * @throws InconsistentJsonException if {@code json} is inconsistent
	 */
	public NonVoidMethodCallTransactionSuccessfulResponseImpl(TransactionResponseJson json) throws InconsistentJsonException {
		this(
			unmapUpdates(json),
			json.getGasConsumedForCPU(),
			json.getGasConsumedForRAM(),
			json.getGasConsumedForStorage(),
			unmapResult(json),
			unmapEvents(json),
			InconsistentJsonException::new
		);
	}

	private static StorageValue unmapResult(TransactionResponseJson json) throws InconsistentJsonException {
		return Objects.requireNonNull(json.getResult(), "result cannot be null", InconsistentJsonException::new).unmap();
	}

	/**
	 * Builds the transaction response.
	 * 
	 * @param <E> the type of the exception thrown if some argument is illegal
	 * @param updates the updates resulting from the execution of the transaction
	 * @param gasConsumedForCPU the amount of gas consumed by the transaction for CPU execution
	 * @param gasConsumedForRAM the amount of gas consumed by the transaction for RAM allocation
	 * @param gasConsumedForStorage the amount of gas consumed by the transaction for storage consumption
	 * @param result the value returned by the method
	 * @param events the events resulting from the execution of the transaction
	 * @param onIllegalArgs the creator of the exception thrown if some argument is illegal
	 * @throws E if some argument is illegal
	 */
	private <E extends Exception> NonVoidMethodCallTransactionSuccessfulResponseImpl(Update[] updates, BigInteger gasConsumedForCPU, BigInteger gasConsumedForRAM, BigInteger gasConsumedForStorage, StorageValue result, StorageReference[] events, ExceptionSupplier<? extends E> onIllegalArgs) throws E {
		super(updates, gasConsumedForCPU, gasConsumedForRAM, gasConsumedForStorage, IllegalArgumentException::new);

		this.result = Objects.requireNonNull(result, "result cannot be null", onIllegalArgs);

		this.events = Objects.requireNonNull(events, "events cannot be null", onIllegalArgs);
		for (var event: events)
			Objects.requireNonNull(event, "events cannot hold null elements", onIllegalArgs);
	}

	@Override
	public final StorageValue getResult() {
		return result;
	}

	@Override
	public boolean equals(Object other) {
		return other instanceof NonVoidMethodCallTransactionSuccessfulResponse mctsr && super.equals(other)
			&& result.equals(mctsr.getResult()) && Arrays.equals(events, mctsr.getEvents().toArray(StorageReference[]::new));
	}

	@Override
	public int hashCode() {
		return super.hashCode() ^ Arrays.hashCode(events) ^ result.hashCode();
	}

	@Override
	public String toString() {
        return super.toString() + "\n"
        	+ "  returned value: " + result + "\n"
        	+ "  events:\n" + getEvents().map(StorageReference::toString).collect(Collectors.joining("\n    ", "    ", ""));
	}

	@Override
	public Stream<StorageReference> getEvents() {
		return Stream.of(events);
	}

	@Override
	public final boolean hasEvents() {
		return events.length > 0;
	}

	@Override
	public void into(MarshallingContext context) throws IOException {
		boolean optimized0 = events.length == 0;
		boolean optimized1 = events.length == 1;
		context.writeByte(optimized0 ? SELECTOR_NO_EVENTS : (optimized1 ? SELECTOR_ONE_EVENT : SELECTOR));
		super.into(context);
		result.into(context);

		if (!optimized0 && !optimized1)
			intoArrayWithoutSelector(events, context);

		if (optimized1)
			events[0].intoWithoutSelector(context);
	}

	private static StorageReference[] unmarshalEvents(UnmarshallingContext context, byte selector) throws IOException {
		if (selector == SELECTOR)
			return context.readLengthAndArray(StorageReferenceImpl::fromWithoutSelector, StorageReference[]::new);
		else if (selector == SELECTOR_NO_EVENTS)
			return NO_REFERENCES;
		else if (selector == SELECTOR_ONE_EVENT)
			return new StorageReference[] { StorageReferenceImpl.fromWithoutSelector(context) };
		else
			throw new IOException("Unexpected response selector: " + selector);
	}
}